#!/usr/bin/ruby

require '../lib/aggregator'

# Constants
$host = "localhost"
$port = "5984"
$database = "allthefucks"

# Example raw input data
# hyfi     pts/11       nomad.ccs.neu.ed Fri Feb  8 18:32:59 2013   still logged in
# hyfi     pts/0        c-24-62-61-212.h Fri Feb  8 01:54:57 2013 - Fri Feb  8 04:33:51 2013  (02:38)

db = Aggregator::CouchDB.new($host,$port)
last = (`last -Fw | head --lines=-2`).split("\n")
hostname = `hostname`.strip.downcase.intern
os = `uname`.strip.downcase.intern
now = Time.now

=begin
Need to parse each line of last to find all sessions from the
last ten minutes (pre-existing, existing, and still-existing).
=end

# Need a way to go from an ascii representation of time to a Time
# instance
class Time
  # Creates a Time instance from an asctime
  # ex: "Wed Apr  9 08:56:03 2003"
  def self.from_asctime(asctime)
    # ["Apr", "9", "08:56:03", "2003"]
    timestamp = asctime.split.drop(1)
    # [8, 56, 3]
    time = timestamp[2].split(':').map { |x| x.to_i }
    Time.local(timestamp[3].to_i, timestamp[0], timestamp[1].to_i,
               time[0], time[1], time[2])
  end
end

last.each do |line|
  line = line.strip.split
  
  # Normalize the data
  if line[1].include? 'tty'
    line.insert(2, nil)
  end
  if line[-3, 3].join(' ') == 'still logged in'
    line.pop(3)
    line << nil
  else
    line.pop
    tmp = Time.from_asctime(line.pop(5).join(' '))
    line.pop
    line << tmp
  end
  line.insert(-2, Time.from_asctime(line.slice!(-6, 5).join(' ')))

  session = Aggregator::Session.new(
    hostname, # hostname
    os,       # os
    line[1].include?('tty') ? :tty : :pts,  # src
    line[3],  # started
    line[4],  # ended
    now       # set
  )

  unless session.ended and session.ended < now - 10*60
    db.post("/"+$database, session.to_json)
  end
end

