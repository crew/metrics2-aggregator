#!/usr/bin/ruby

require '../lib/aggregator'

@couch = Aggregator::CouchDB.new

# send : Array of Sessions -> void
# Given an array of Sessions, throws every Session
# that was within the last 10 minutes into CouchDb
def send(sessions)
  database = Aggregator::Config::DATABASE
  sessions.each do |session|
    ten_minutes_ago = session.set - 10*60

    if (session.ended and session.ended >= ten_minutes_ago) or (session.started and session.started >= ten_minutes_ago)
      puts "Sending #{session}"
      @couch.post('/'+database, session.to_json)
    else
      puts ten_minutes_ago.asctime
      puts session.started.asctime if session.started
      puts session.ended.asctime if session.ended
      puts "\n"
    end

  end
end

# get_last : String -> Array of Sessions
# Given a filename for a Linux w10 file, grabs the file,
# parses the contents, and throws the data into CouchDb
def get_last(filename, hostname, set)
  last = (`last -Ff #{filename}| grep -v root | grep -v system | head --lines=-2`).split("\n")
  sessions = last.map do |line|
    Aggregator::Parser.parse_last_line(line, hostname, set)
  end

  send sessions

  sessions
end

# get_windows : String -> Array of Sessions
# Given a filename for a Windows log file, grabs the file,
# parses the contents, and throws the data into CouchDb
def get_windows(filename)
  set = Time.at(filename.to_i)
  filename = "#{Aggregator::Config::WINDOWS_LOG_DIR}/#{filename}"
  file = IO.readlines(filename, 'r')[0]
  sessions = Aggregator::Parser.get_windows_log(file, set)
  send sessions
  sessions
end

# Does everything
def download_a_car
  puts "Downloading a car"
  # Linuxy things
  linux_log_files = Dir.entries(Aggregator::Config::LINUX_LOG_DIR)
  linux_log_files.delete('.')
  linux_log_files.delete('..')
  
  linux_log_files.each do |filename|
    hostname, set = filename.split('-')
    hostname = hostname.intern
    set = Time.at(set.to_i)
    filename = "#{Aggregator::Config::LINUX_LOG_DIR}/#{filename}"
    puts "file: #{filename},\thostname: #{hostname},\tset: #{set}"
    get_last(filename, hostname, set)
  end

  # Windowsy things
  windows_log_files = Dir.entries(Aggregator::Config::WINDOWS_LOG_DIR)
  windows_log_files.delete('.')
  windows_log_files.delete('..')

  windows_log_files.each do |filename|
    puts "file: #{filename}"
    get_windows(filename)
  end
end

#you wouldn't
download_a_car
