#!/usr/bin/ruby

require '../lib/aggregator'

@config = Aggregator::Config
@database = @config::DATABASES[:lab_machines]
@couch = Aggregator::CouchDB.new

# send : Array of Sessions -> void
# Given an array of Sessions, throws every Session
# that was within the last 10 minutes into CouchDb
def send(data)
  @couch.post('/'+@database, data.to_json)
  data
end

# get_last : String Symbol Time -> Array of Sessions
def get_last(filename, hostname, set)
  last = (`last -Ff #{filename}| grep -v root | grep -v system | head --lines=-2`).split("\n")

  data = {
    hostname: hostname,
    os: :linux,
    users: {
      total: 0,
      tty: 0,
      pts: 0
    },
    timestamp: set.to_i
  }

  last.map do |line|
    session = Aggregator::Parser.parse_last_line(line, hostname, set)
    if session.should_send?
      data[:users][session.source] += 1
      data[:users][:total] += 1
    end
  end

  send data
end

# get_windows : String -> Array of Sessions
# Given a filename for a Windows log file, grabs the file,
# parses the contents, and throws the data into CouchDb
def get_windows(filename)
  set = Time.at(filename.to_i)
  filename = "#{Aggregator::Config::WINDOWS_LOG_DIR}/#{filename}"
  file = IO.readlines(filename, 'r')[0]
  sessions = Aggregator::Parser.get_windows_log(file, set)

  data = {
    hostname: hostname,
    os: :windows,
    users: {
      total: 0
    },
    timestamp: set.to_i
  }

  last.map do |line|
    session = Aggregator::Parser.parse_last_line(line, hostname, set)
    data[:users][:total] += 1 if session.should_send?
  end

  send data
end

# Does everything
def download_a_car
  puts "Downloading a car"
  # Linuxy things
  linux_log_files = Dir.entries(@config::LINUX_LOG_DIR)
  linux_log_files.delete('.')
  linux_log_files.delete('..')
  
  puts "Linux files: #{linux_log_files.size}"
  linux_log_files.each do |filename|
    hostname, set = filename.split('-')
    hostname = hostname.intern
    set = Time.at(set.to_i)
    filename = "#{@config::LINUX_LOG_DIR}/#{filename}"
    puts "file: #{filename},\thostname: #{hostname},\tset: #{set}"
    get_last(filename, hostname, set)
  end

  # Windowsy things
  windows_log_files = Dir.entries(@config::WINDOWS_LOG_DIR)
  windows_log_files.delete('.')
  windows_log_files.delete('..')

  puts "Windows files: #{windows_log_files.size}"
  windows_log_files.each do |filename|
    puts "file: #{filename}"
    get_windows(filename)
  end
end

#you wouldn't
download_a_car
